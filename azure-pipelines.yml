# Morphic for Windows (.NET Desktop)

# Documentation used in this pipeline:
# .NET pipelines docs: 
# - Build, test, and deploy: https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core
# - .NET pipelines tasks: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/
# Microsoft-hosted agents: https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
# - Windows 2019 components and version options: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
# .NET Core release versions: https://github.com/dotnet/core/blob/main/release-notes/releases-index.json
# .NET Core RIDs (including x86/x64/ARM64): https://docs.microsoft.com/en-us/dotnet/core/rid-catalog

trigger:
  branches:
    include:
    # TODO: before production, limit the branches that are automatically built
#      - master
      - '*'

pr:
  branches:
    include:
    - '*'
    
variables:
# Import all the code-signing variables (from the Library)
- group: 'windows-code-sign'
- name: mainProject
  value: Morphic/Morphic.csproj
- name: projects
  value:  |
      Morphic.Core/Morphic.Core.csproj
      Morphic.OAuth/Morphic.OAuth.csproj
      Morphic.Windows.Native/Morphic.Windows.Native.csproj
      Morphic/Morphic.csproj
  
  # TODO: temporary values
- name: versionMajor
  value: 1
- name: versionMinor
  value: 9
- name: versionBuild
  value: 10
- name: versionRevision
  value: 0

stages:
  - stage: build
    jobs:
      - job: build
        pool:
          vmImage: 'windows-2019'
        steps:
#        - task: UseDotNet@2
#          displayName: 'Use .NET SDK 6.0-preview.1'
#          inputs:
#            packageType: sdk
#            version: 6.0.100-preview.1.21103.13
#            installationPath: $(Agent.ToolsDirectory)/dotnet
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 5.0.200'
          inputs:
            packageType: sdk
            version: 5.0.200
            installationPath: $(Agent.ToolsDirectory)/dotnet

#        - task: CmdLine@2
#          inputs:
#            script: 'dotnet --info'

        - task: DotNetCoreCLI@2
          displayName: 'dotnet restore'
          inputs:
            command: restore
            projects: '$(projects)'
        
        - task: DotNetCoreCLI@2
          displayName: 'dotnet build'
          inputs:
           command: build
           projects: '$(mainProject)'

        - task: DotNetCoreCLI@2
          displayName: 'dotnet publish (x86)'
          inputs:
            command: publish
            publishWebProjects: false
            projects: '$(mainProject)'
            arguments: '-f net5.0-windows -r win10-x86 -c Release'


        - task: DotNetCoreCLI@2
          displayName: 'dotnet publish (x64)'
          inputs:
            command: publish
            publishWebProjects: false
            projects: '$(mainProject)'
            arguments: '-f net5.0-windows -r win10-x64 -c Release'


#        - task: DotNetCoreCLI@2
#          displayName: 'dotnet publish (arm64)'
#          inputs:
#            command: publish
#            publishWebProjects: false
#            projects: '$(mainProject)'
#            arguments: '-f net5.0-windows -r win10-arm64 -c Release'

        - powershell: |
            # Update MorphicPackage's appmanifest with a version number before building it
            [xml]$manifest= get-content ".\MorphicPackage\Package.appxmanifest"
            $manifest.Package.Identity.Version = "$(versionMajor).$(versionMinor).$(versionBuild).$(versionRevision)"    
            $manifest.save("MorphicPackage/Package.appxmanifest")
          displayName: 'Assign version to package manifest'

        - task: MSBuild@1
          displayName: 'Package MSIX (x86)'
          inputs:
            solution: MorphicPackage/MorphicPackage.wapproj
            platform: x86
            configuration: Release
            msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly  /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MorphicSetup_x86.msix /p:AppxPackageSigningEnabled=false'

        - task: MSBuild@1
          displayName: 'Package MSIX (x64)'
          inputs:
            solution: MorphicPackage/MorphicPackage.wapproj
            platform: x64
            configuration: Release
            msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly  /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MorphicSetup_x64.msix /p:AppxPackageSigningEnabled=false'

#        - task: MSBuild@1
#          displayName: 'Package MSIX (arm64)'
#          inputs:
#            solution: MorphicPackage/MorphicPackage.wapproj
#            platform: arm64
#            configuration: Release
#            msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly  /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MorphicSetup_x64.msix /p:AppxPackageSigningEnabled=false'

        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 2.1'
          inputs:
            packageType: sdk
            version: 2.1.811
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: DotNetCoreCLI@2
          displayName: 'Install AzureSignTool 2.0.17'
          inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'install --global --version 2.0.17 azuresigntool'

# ### SIGNING NOTE (applicable to all signed files) ###
# NOTE: if we experience downtime with our cert provider's timestamp servers (which causes signing to fail), 
#       we can use the test server (production timestamps, but from a 2nd provider); note that we should NOT do
#       this for any public preview or release builds...only for internal testing or emergency scenarios.
#              -tr "$(TimestampUrl)"
#              -tr "$(TimestampUrl2)"
#              vs.
#              -tr "$(TestOnlyTimestampUrl)"

        - task: CmdLine@2
          displayName: 'Sign MSIX (x86)'
          inputs:
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\MorphicSetup_x86.msix
	      
        - task: PublishPipelineArtifact@1
          displayName: "Cache MSIX (x86) for upload"
          targetPath: $(Build.ArtifactStagingDirectory)\MorphicSetup_x86.msix
          artifactName: msix-x86
          artifactType: pipeline

        - task: CmdLine@2
          displayName: 'Sign MSIX (x64)'
          inputs:
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\MorphicSetup_x64.msix
	      
        - task: PublishPipelineArtifact@1
          displayName: "Cache MSIX (x64) for upload"
          targetPath: $(Build.ArtifactStagingDirectory)\MorphicSetup_x64.msix
          artifactName: msix-x64
          artifactType: pipeline

#        - task: CmdLine@2
#          displayName: 'Sign MSIX (arm64)'
#          inputs:
#            script: >
#              AzureSignTool sign
#              -d Morphic
#              -du "$(SigningURL)"
#              -kvu "$(SigningVaultURL)"
#              -kvi "$(SigningClientId)"
#              -kvs "$(SigningClientSecret)"
#              -kvc "$(SigningCertName)"
#              -tr "$(TimestampUrl2)"
#              -v $(Build.ArtifactStagingDirectory)\MorphicSetup_arm64.msix
#
#        - task: PublishPipelineArtifact@1
#          displayName: "Cache MSIX (arm64) for upload"
#          targetPath: $(Build.ArtifactStagingDirectory)\MorphicSetup_arm64.msix
#          artifactName: msix-arm64
#          artifactType: pipeline

  - stage: upload
    jobs:
      - job: publish_msix
        pool:
          vmImage: "ubuntu-20.04"
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Capture MSIX (x86) for upload"
          source: 'current'
	  artifact: msix-x86
	  path: ${AGENT_BUILDDIRECTORY}/msix-x86

        - task: DownloadPipelineArtifact@2
          displayName: "Capture MSIX (x64) for upload"
          source: 'current'
	  artifact: msix-x64
	  path: ${AGENT_BUILDDIRECTORY}/msix-x64

#        - task: DownloadPipelineArtifact@2
#          displayName: "Capture MSIX (arm64) for upload"
#          source: 'current'
#	  artifact: msix-arm64
#	  path: ${AGENT_BUILDDIRECTORY}/msix-arm64
